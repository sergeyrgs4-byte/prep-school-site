const questions = [
  { id:'attention_1', title:'–ù–∞–π–¥–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ: –≤—ã–±–µ—Ä–∏ –ø–∞—Ä—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ.', answers:['üçé –∏ üçé','üçé –∏ üçê','üçå –∏ üçá','üçê –∏ üçâ'], correctIndex:0, skill:'attention' },
  { id:'numeracy_1',  title:'–°–æ—Å—á–∏—Ç–∞–π: —Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥? ‚≠ê ‚≠ê ‚≠ê', answers:['2','3','4'], correctIndex:1, skill:'numeracy' },
  { id:'phonics_1',   title:'–ö–∞–∫–æ–π –∑–≤—É–∫ –≤ –Ω–∞—á–∞–ª–µ —Å–ª–æ–≤–∞ ¬´–º–∞–º–∞¬ª?', answers:['–°','–ú','–õ'], correctIndex:1, skill:'phonics' },
  { id:'shapes_1',    title:'–í—ã–±–µ—Ä–∏ –∫—Ä—É–≥.', answers:['‚¨ú –ö–≤–∞–¥—Ä–∞—Ç','üî∫ –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫','‚ö™ –ö—Ä—É–≥'], correctIndex:2, skill:'shapes' },
  { id:'sequence_1',  title:'–ß—Ç–æ –¥–∞–ª—å—à–µ –≤ —Ä—è–¥—É: 1, 2, 3, ‚Ä¶?', answers:['2','4','5'], correctIndex:1, skill:'logic' } // 4
];

let state = { i:0, selected:null, score:{ attention:0, numeracy:0, phonics:0, shapes:0, logic:0 } };

const elTitle   = document.getElementById('qTitle');
const elAnswers = document.getElementById('answers');
const elNext    = document.getElementById('nextBtn');
const elBar     = document.getElementById('bar');
const elResult  = document.getElementById('result');
const elSummary = document.getElementById('summary');

function render(){
  const q = questions[state.i];
  elTitle.textContent = `–ó–∞–¥–∞–Ω–∏–µ ${state.i+1} –∏–∑ ${questions.length}: ${q.title}`;
  elAnswers.innerHTML = '';
  q.answers.forEach((t, idx) => {
    const b = document.createElement('button');
    b.className = 'btn' + (state.selected === idx ? ' sel' : '');
    b.textContent = t;
    b.onclick = () => { state.selected = idx; render(); };
    elAnswers.appendChild(b);
  });
  elBar.style.width = `${(state.i/questions.length)*100}%`;
  elNext.textContent = state.i < questions.length-1 ? '–î–∞–ª—å—à–µ' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç';
}

function next(){
  const q = questions[state.i];
  if (state.selected === null) { speak('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç'); return; }
  if (state.selected === q.correctIndex) { state.score[q.skill] += 1; speak('–ú–æ–ª–æ–¥–µ—Ü!'); }
  else { speak('–ù–∏—á–µ–≥–æ, –∏–¥—ë–º –¥–∞–ª—å—à–µ!'); }
  state.i += 1;
  state.selected = null;
  if (state.i >= questions.length) finish(); else render();
}

function finish(){
  elBar.style.width = '100%';
  const s = state.score, total = questions.length;
  elSummary.textContent = `–ë–∞–ª–ª—ã: –≤–Ω–∏–º–∞–Ω–∏–µ ${s.attention}, —Å—á—ë—Ç ${s.numeracy}, –∑–≤—É–∫–∏ ${s.phonics}, —Ñ–æ—Ä–º—ã ${s.shapes}, –ª–æ–≥–∏–∫–∞ ${s.logic}. –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é.`;
  elResult.style.display = 'block';
  localStorage.setItem('readiness_result_v1', JSON.stringify({ date:new Date().toISOString(), score:s, total }));
  speak('–û—Ç–ª–∏—á–Ω–æ! –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
}

elNext.addEventListener('click', next);
render();
